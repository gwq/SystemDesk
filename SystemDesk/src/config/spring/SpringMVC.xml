<?xml version="1.0" encoding="UTF-8"?>  
<beans  
        xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:tx="http://www.springframework.org/schema/tx"  
        xmlns:context="http://www.springframework.org/schema/context"    
        xmlns:mvc="http://www.springframework.org/schema/mvc"    
        xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-3.0.xsd  
        http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">  
      
      <!-- 自动扫描的controller,service包名，component-scan只扫描component组件-->
      <context:component-scan base-package="com.app" ></context:component-scan>  
          
        <!--  视图解释类  -->  
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
            <property name="prefix" value="/WEB-INF/page/jsp"/>  
            <property name="suffix" value=".jsp"/><!-- 可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->  
            <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />  
        </bean>  
          
        <!--  拦截器 --> 
        <mvc:interceptors>  
            <bean class="com.app.interceptor.interceptorOne" />  
        </mvc:interceptors>   
            
          
        <!--对静态资源文件的访问  方案一 （二选一） -->  
        <!-- <mvc:default-servlet-handler/>  -->  
          
        <!-- 对静态资源文件的访问  方案二 （二选一） -->  
        <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>  
        <mvc:resources mapping="/scripts/**" location="/scripts/" cache-period="31556926"/>  
        <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/> 
        <mvc:resources mapping="/datapic/**" location="/datapic/" cache-period="31556926"/> 
        
        <!-- SpringMVC 文件上传配置 -->
        <!--
        <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
        <property name="defaultEncoding" value="utf-8" />  
        <property name="maxUploadSize" value="5400000" />  
        <property name="uploadTempDir" value="fileUpload/temp" />   
        </bean>  
        -->
        
        
        <!-- 支持 @Transactional 标记
		<tx:annotation-driven/>
	     -->
		<!-- 支持 @AspectJ 标记，在SpringMVC中，对controller等组件的切面必须在SpringMVC配置文件中处理
		<aop:aspectj-autoproxy/> 
		-->
		<!-- 需要在配置文件中手动注册切面的bean，切点和其他配置可以在注解中完成 
	    <bean id="demoAdvice" class="com.app.advice.DemoAdvice"/> 
	    <bean id="serviceAdvice" class="com.app.advice.ServiceAdvice"/>  
		-->
		
		
		<!-- (非注解方式)以AspectJ方式 定义 AOP 
		<aop:config proxy-target-class="true">
			<aop:advisor pointcut="execution(* com.app..service..*Service.*(..))" advice-ref="txAdvice"/>
			<aop:advisor pointcut="execution(* org.springside.core.dao.*Dao.*(..))" advice-ref="txAdvice"/>
		</aop:config>
	    -->
	    
		<!-- 基本事务定义,使用transactionManager作事务管理,默认get*方法的事务为readonly,其余方法按默认设置.
				 默认的设置请参考Spring文档事务一章. 
		<tx:advice id="txAdvice">
			<tx:attributes>
				<tx:method name="get*" read-only="true"/>
				<tx:method name="find*" read-only="true"/>
				<tx:method name="*"/>
			</tx:attributes>
		</tx:advice> 
	      -->
        
        
        
        <!-- 默认的注解映射的支持配置 --> 
        <mvc:annotation-driven />  
       
        <!--  <mvc:annotation-driven /> 实际所做的工作  -->
        <!--
		<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">          
		    <property name="interceptors">  
		        <list>    
		        </list>          
		    </property>          
		</bean>     
        <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
			    <property name="messageConverters">    
			        <list>    
			            <ref bean="byteArray_hmc" />    
			            <ref bean="string_hmc" />    
			            <ref bean="resource_hmc" />    
			            <ref bean="source_hmc" />    
			            <ref bean="xmlAwareForm_hmc" />    
			            <ref bean="jaxb2RootElement_hmc" />    
			            <ref bean="jackson_hmc" />    
			        </list>    
			    </property>    
				</bean>    
				<bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" />
				<bean id="resource_hmc" class="org.springframework.http.converter.ResourceHttpMessageConverter" />
				<bean id="source_hmc" class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
				<bean id="xmlAwareForm_hmc" class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" />
				<bean id="jaxb2RootElement_hmc" class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
				<bean id="jackson_hmc" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
               --> 

</beans>   
 